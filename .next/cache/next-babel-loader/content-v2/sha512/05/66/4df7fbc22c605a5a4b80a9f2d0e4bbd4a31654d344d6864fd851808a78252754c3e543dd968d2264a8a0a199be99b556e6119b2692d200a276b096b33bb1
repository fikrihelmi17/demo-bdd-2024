{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { Component } from 'react';\nimport Head from 'next/head';\nimport ContentEditable from 'react-contenteditable';\nimport Link from 'next/link';\nimport AnnounceBar from '../../../components/Common/AnnounceBar';\nimport styles from './Edit.module.scss';\nimport { getBaseURL } from '../../../lib/utils/storage';\nimport fetcher from '../../../lib/utils/fetcher';\n\nclass Edit extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      title: '',\n      body: '',\n      tags: [],\n      isFetching: false,\n      isError: false,\n      note: null\n    };\n    this.contentEditable = /*#__PURE__*/React.createRef();\n    this.handleTitleChange = this.handleTitleChange.bind(this);\n    this.handleTagsChange = this.handleTagsChange.bind(this);\n    this.handleBodyChange = this.handleBodyChange.bind(this);\n    this.handleUpdateNote = this.handleUpdateNote.bind(this);\n    this.handleDeleteNote = this.handleDeleteNote.bind(this); // eslint-disable-next-line no-empty\n  }\n\n  async componentDidMount() {\n    try {\n      const {\n        id\n      } = this.props;\n      const {\n        data: {\n          note\n        }\n      } = await fetcher(`${getBaseURL()}notes/${id}`);\n      const {\n        title,\n        body,\n        tags\n      } = note;\n      this.setState(prevState => _objectSpread(_objectSpread({}, prevState), {}, {\n        note,\n        title,\n        body,\n        tags\n      }));\n    } catch (error) {\n      this.setState(prevState => _objectSpread(_objectSpread({}, prevState), {}, {\n        isError: true\n      }));\n    }\n  }\n\n  handleTitleChange({\n    target\n  }) {\n    this.setState(prevState => _objectSpread(_objectSpread({}, prevState), {}, {\n      title: target.value\n    }));\n  }\n\n  handleTagsChange({\n    target\n  }) {\n    this.setState(prevState => _objectSpread(_objectSpread({}, prevState), {}, {\n      tags: target.value.split(',').map(tag => tag.trim()).filter(tag => tag !== '')\n    }));\n  }\n\n  handleBodyChange({\n    target\n  }) {\n    this.setState(prevState => _objectSpread(_objectSpread({}, prevState), {}, {\n      body: target.value\n    }));\n  }\n\n  async handleUpdateNote() {\n    const {\n      title,\n      body,\n      tags\n    } = this.state;\n    const {\n      id\n    } = this.props;\n    this.setState(prevState => _objectSpread(_objectSpread({}, prevState), {}, {\n      isFetching: true\n    }));\n\n    try {\n      await fetcher(`${getBaseURL()}notes/${id}`, {\n        method: 'PUT',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          title,\n          body,\n          tags\n        })\n      });\n\n      if (window) {\n        window.location.href = `/notes/${id}`;\n      }\n    } catch (error) {\n      if (window) {\n        alert(error.message);\n      }\n\n      this.setState(prevState => _objectSpread(_objectSpread({}, prevState), {}, {\n        isFetching: false\n      }));\n    }\n  }\n\n  async handleDeleteNote() {\n    const {\n      id\n    } = this.props;\n\n    try {\n      await fetcher(`${getBaseURL()}notes/${id}`, {\n        method: 'DELETE'\n      });\n\n      if (window) {\n        window.location.href = '/';\n      }\n    } catch (error) {\n      if (window) {\n        alert(error.message);\n      }\n\n      this.setState(prevState => _objectSpread(_objectSpread({}, prevState), {}, {\n        isFetching: false\n      }));\n    }\n  }\n\n  renderError() {\n    return /*#__PURE__*/_jsxs(\"div\", {\n      children: [/*#__PURE__*/_jsx(Head, {\n        children: /*#__PURE__*/_jsx(\"title\", {\n          children: \"Notes - Not Found\"\n        })\n      }), /*#__PURE__*/_jsx(AnnounceBar, {}), /*#__PURE__*/_jsxs(\"main\", {\n        className: styles.error,\n        children: [/*#__PURE__*/_jsx(\"p\", {\n          children: \"Error displaying notes! Make sure you have done with the back-end or correct url.\"\n        }), /*#__PURE__*/_jsx(Link, {\n          href: \"/\",\n          children: \"Back to Home\"\n        })]\n      })]\n    });\n  }\n\n  renderSuccess() {\n    const {\n      title,\n      body,\n      isFetching,\n      tags\n    } = this.state;\n    return /*#__PURE__*/_jsxs(\"div\", {\n      children: [/*#__PURE__*/_jsx(Head, {\n        children: /*#__PURE__*/_jsxs(\"title\", {\n          children: [\"Edit -\", ' ', title]\n        })\n      }), /*#__PURE__*/_jsx(AnnounceBar, {}), /*#__PURE__*/_jsx(\"main\", {\n        className: styles.edit_page,\n        children: /*#__PURE__*/_jsxs(\"section\", {\n          className: styles.edit_page__content,\n          children: [/*#__PURE__*/_jsxs(\"header\", {\n            className: styles.edit_page__header,\n            children: [/*#__PURE__*/_jsx(\"input\", {\n              className: styles.edit_page__title,\n              value: title,\n              onChange: this.handleTitleChange,\n              type: \"text\",\n              autoComplete: \"off\",\n              placeholder: \"Note title\"\n            }), /*#__PURE__*/_jsx(\"input\", {\n              className: styles.edit_page__tags,\n              placeholder: \"Tag 1, Tag 2, Tag 3\",\n              defaultValue: tags.join(', '),\n              type: \"text\",\n              autoComplete: \"off\",\n              onChange: this.handleTagsChange\n            })]\n          }), /*#__PURE__*/_jsx(ContentEditable, {\n            className: styles.edit_page__body,\n            html: body,\n            innerRef: this.contentEditable,\n            disabled: false,\n            onChange: this.handleBodyChange\n          }), /*#__PURE__*/_jsxs(\"div\", {\n            className: styles.edit_page__action,\n            children: [/*#__PURE__*/_jsx(\"button\", {\n              disabled: isFetching,\n              className: styles.update_button,\n              type: \"button\",\n              onClick: this.handleUpdateNote,\n              children: \"Save Note\"\n            }), /*#__PURE__*/_jsx(\"button\", {\n              className: styles.delete_button,\n              type: \"button\",\n              onClick: this.handleDeleteNote,\n              children: \"Delete Note\"\n            })]\n          })]\n        })\n      })]\n    });\n  }\n\n  render() {\n    const {\n      isError,\n      note\n    } = this.state;\n\n    if (isError) {\n      return this.renderError();\n    }\n\n    if (note) {\n      return this.renderSuccess();\n    }\n\n    return /*#__PURE__*/_jsx(_Fragment, {});\n  }\n\n}\n\nexport async function getServerSideProps({\n  params\n}) {\n  const {\n    id\n  } = params;\n  return {\n    props: {\n      id\n    }\n  };\n}\nexport default Edit;","map":null,"metadata":{},"sourceType":"module"}