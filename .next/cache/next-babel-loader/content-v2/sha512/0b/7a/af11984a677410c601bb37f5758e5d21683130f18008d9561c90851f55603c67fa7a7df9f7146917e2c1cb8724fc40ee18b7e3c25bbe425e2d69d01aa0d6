{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nconst fetcher = async (url, options) => {\n  const response = await fetch(url, _objectSpread({\n    headers: {\n      \"ngrok-skip-browser-warning\": \"true\"\n    }\n  }, options));\n\n  if (!response.status.toString().startsWith('2')) {\n    const {\n      message\n    } = await response.json();\n    throw new Error(message);\n  }\n\n  return response.json();\n};\n\nexport default fetcher;","map":{"version":3,"sources":["C:/Users/fikri/Documents/Project/Demo BDD/Notes App/lib/utils/fetcher.js"],"names":["fetcher","url","options","response","fetch","headers","status","toString","startsWith","message","json","Error"],"mappings":";;;;;;AAAA,MAAMA,OAAO,GAAG,OAAOC,GAAP,EAAYC,OAAZ,KAAwB;AACtC,QAAMC,QAAQ,GAAG,MAAMC,KAAK,CAACH,GAAD;AAC1BI,IAAAA,OAAO,EAAE;AACP,oCAA8B;AADvB;AADiB,KAIvBH,OAJuB,EAA5B;;AAOA,MAAI,CAACC,QAAQ,CAACG,MAAT,CAAgBC,QAAhB,GAA2BC,UAA3B,CAAsC,GAAtC,CAAL,EAAiD;AAC/C,UAAM;AAAEC,MAAAA;AAAF,QAAc,MAAMN,QAAQ,CAACO,IAAT,EAA1B;AACA,UAAM,IAAIC,KAAJ,CAAUF,OAAV,CAAN;AACD;;AAED,SAAON,QAAQ,CAACO,IAAT,EAAP;AACD,CAdD;;AAgBA,eAAeV,OAAf","sourcesContent":["const fetcher = async (url, options) => {\r\n  const response = await fetch(url, {\r\n    headers: {\r\n      \"ngrok-skip-browser-warning\": \"true\",\r\n    },\r\n    ...options, \r\n  });\r\n\r\n  if (!response.status.toString().startsWith('2')) {\r\n    const { message } = await response.json();\r\n    throw new Error(message);\r\n  }\r\n\r\n  return response.json();\r\n};\r\n\r\nexport default fetcher;\r\n"]},"metadata":{},"sourceType":"module"}